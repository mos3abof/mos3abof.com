<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monitoring, | Mosab Ahmad]]></title>
  <link href="http://www.mos3abof.com/blog/categories/monitoring-/atom.xml" rel="self"/>
  <link href="http://www.mos3abof.com/"/>
  <updated>2013-02-19T20:03:13+02:00</updated>
  <id>http://www.mos3abof.com/</id>
  <author>
    <name><![CDATA[Mosab Ahmad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poor man's guide for Monitoring a website using Python]]></title>
    <link href="http://www.mos3abof.com/blog/2013/02/11/monitoring-a-website-using-python/"/>
    <updated>2013-02-11T17:34:00+02:00</updated>
    <id>http://www.mos3abof.com/blog/2013/02/11/monitoring-a-website-using-python</id>
    <content type="html"><![CDATA[<p><img src="http://s8.postimage.org/gvv1dcv4l/website_monitoring_with_python.jpg" alt="Monitor your website with Python" /></p>

<p>In one of the projects I am working on there was a problem with Apache server. It went down almost on a daily basis, and we were reading the logs to get the bottom of the root cause. But untill we got our solution we needed to monitor the server's accssibility through the web, and get alerted if it went down, and ultimately restart it when this happened.</p>

<p>So I fired up my console and text editor and started hacking a little script to do the above mentioned side goals.</p>

<ol>
<li>Monitoring the Apache server's accessiblity from a different server.</li>
<li>SSH-ing the linux box running the server and restarting Apache.</li>
<li>Alerting the DevOps team about the issue.</li>
<li>Putting it all together</li>
<li>Setting up a cron job to run the script</li>
</ol>


<p>I am assuming you are running an ubunut machine.</p>

<h3>1. Monitoring the Apache Server</h3>

<p>I was confused between two <code>Python 2.x</code> libraries (note that they are dramatically changed in <code>Python 3.x</code> and choosing between them is subject to different ciretera).
The first library was <code>python-httplib</code> and the second was <code>urllib</code>. After a quick reading through both library's manual and a quick reading on StackOverflow I have decided to go for urllib.</p>

<p>Basically what I had in mind was to send a GET request to the website served by Apache and check the HTTP response code I got.
If it is <em>200</em> -which is the SUCCESS response code according to HTTP standards- then everything is fine.</p>

<p>You can try this in a python interactive shell :</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>import urllib
response_code = urllib.urlopen("http://www.example.com").getcode()
print response_code
200
```</p></blockquote></blockquote></blockquote>

<p>If the printed value is 200 then the website is up and running, if it has a different value or raises an Exception then the site is likely down (Assuming you have internet connectivity, no firewalls blocking your way, etc).</p>

<p>Time to put it together in a script :</p>

<p>```python
import urllib</p>

<p>try:</p>

<pre><code>resposne_code = urllib.urlopen("http://www.example.com").getcode()
if response_code != 200:
    raise ValueError
</code></pre>

<p>except:</p>

<pre><code>pass
# Here write code to do whatever you want to do when the website is down.
</code></pre>

<p>```</p>

<h3>2. Restart the Apache server remotely</h3>

<p>There is a wonderful Python library and a command-line tool called <em><a href="http://docs.fabfile.org/en/1.5/">Fabric</a></em> that helps you streamlining the use of SSH for application deployment or systems administration tasks. It is ideally used to automate tedious error prone tasks in an easy way.</p>

<p>You can read about more about it in their documentation.</p>

<p>Install it by running the following command:</p>

<p><code>
$ sudo apt-get install fabric
</code></p>

<p>We now need to create a new python file that I will name <code>fabfile.py</code>, you can name it anything, but let's just follow the common name you will see in Fabric's documenation.</p>

<p>```python
from fabric.api import env, sudo</p>

<p>env.hosts       = ['user@server']
env.passwords   = {'user@server' : 'password' }</p>

<p>def restart_apache():</p>

<pre><code>sudo("apache2ctl restart")
</code></pre>

<p>```</p>

<p>We start by importing what we need from Fabric. Then we tell it some information about the server we want to restart Apache on by setting the <code>env.hosts</code> and <code>env.passwords</code> variables.</p>

<p>Then we define a <code>restart_apache</code> function that we will call later to do the actual restart.</p>

<p>There are three main functions that are used the most, <code>local()</code> that runs local commands, <code>run()</code> that runs commands on the remote server and <code>sudo()</code> that runs commands on the remote server using <code>sudo</code>. Since Apache restart requires a root user or sudo priveleges we used the <code>sudo()</code> function.</p>

<p>To run a Fabric script open up your terminal and run the following command:</p>

<p><code>
$ fabric fabfile.py restart_apache
</code></p>

<p>If you want to run it from a different directory than the <code>fabfile.py</code> then you need to use the <code>-f</code> option like this :</p>

<p><code>
$ fabric -f /path/to/your/fabfile.py function_name
</code></p>

<h3>3. Alerting the DevOps team about the issue.</h3>

<p>We can re-use the email function from the previous post on this blog <a href="http://www.mos3abof.com/blog/2012/11/29/installing-gdata-python-client-on-dreamhost/">Installing Gdata Python Client on Dreamhost</a>:</p>

<p>```python
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders</p>

<p>subject     = 'Your website is down'
email_body  = 'Your website is down'
gmail_user  = 'YOUR-GMAIL-ADDRESS'
gmail_pwd   = 'YOUR-GMAIL-PASSWORD'
recepient   = 'DEVOPS-EMAIL'</p>

<p>def mail(to, subject, text, gmail_user, gmail_pwd):</p>

<pre><code>'''
Sends mail using gmail
'''
msg = MIMEMultipart()

# Setting up message data
msg['From']     = 'DEVOPS-EMAIL'
msg['To']       = to
msg['Subject']  = subject

msg.attach(MIMEText(text))

# Opening the connection with Gmail SMTP server
mailServer = smtplib.SMTP("smtp.gmail.com", 587)
mailServer.ehlo()
mailServer.starttls()
mailServer.ehlo()
mailServer.login(gmail_user, gmail_pwd)

# Actual sending of the email
mailServer.sendmail(gmail_user, to, msg.as_string())

# Closing the connection
# Should be mailServer.quit(), but that crashes
mailServer.close()
</code></pre>

<p>```</p>

<h3>4. Putting it all together</h3>

<p>I have combined all the snippets mentioned above, modified them and added some logging functionality to it.</p>

<p>I have it installed on <code>/opt/fabfile.py</code> and I have created a <code>/opt/fab_logs</code> folder to hold the log files.</p>

<p>Below is how a complete script may look like.</p>

<p><div><script src='https://gist.github.com/4771874.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h3>5. Setting up a cron job to run the script</h3>

<p>Now we have a great script, and we know how to run it manually. But it would be invonvenient to run it manually all the time. We need to setup a cron job to do it periodically for us.</p>

<p>Run the following command in the terminal to edit your crontab file:</p>

<p><code>
crontab -e
</code></p>

<p>Then add the following line to the file to run the script every hour:</p>

<p><code>
0 * * * * /usr/bin/fab -f /path/to/your/fabfile.py restart_apache
</code></p>

<p>Happy website monitoring.</p>
]]></content>
  </entry>
  
</feed>
