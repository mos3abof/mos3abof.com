<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mosab Ahmad]]></title>
  <link href="http://www.mos3abof.com/atom.xml" rel="self"/>
  <link href="http://www.mos3abof.com/"/>
  <updated>2013-02-19T23:31:49+02:00</updated>
  <id>http://www.mos3abof.com/</id>
  <author>
    <name><![CDATA[Mosab Ahmad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Guide to Reading Data from Excel Sheets in Python]]></title>
    <link href="http://www.mos3abof.com/blog/2013/02/19/reading-data-from-excel-sheets-in-python/"/>
    <updated>2013-02-19T13:18:00+02:00</updated>
    <id>http://www.mos3abof.com/blog/2013/02/19/reading-data-from-excel-sheets-in-python</id>
    <content type="html"><![CDATA[<p><img src="http://i.stack.imgur.com/Jl8fh.png" alt="Excel Date Sample" /></p>

<p>On <em>May 22nd 2012</em> I was approached by the official campaign of the presidential candidate &#8221;<a href="http://www.abolfotoh.net/">Abolfotoh</a>&#8221;.
They needed help setting up a Google App Engine project.
It was originally created by &#8221;<a href="http://www.espace.com.eg">Espace</a>&#8221; <em>-an awesome Egyptian company-</em> and published on <a href="https://code.google.com/p/egypt-election-2012-demo/">Google Code</a>.
I helped them with he setup, but that is another story.</p>

<p>The application was an interactive map that uses Google Maps to plot data about voters and polling stations.
What they wanted further was to create another application to collect data from their official representatives on the ground and use this tool
to feed the Google App Engine application with data.</p>

<p>The first task was to import the polling stations meta data -if we may call it so- like the Governorate it belonged to, the city,
the number of voter, the police station it belongs to, address, etc.
This data was provided to me in an excel sheet so I had to find an automated way to import it.</p>

<p>For the sake of simplicity, lets assume we have an excel sheet that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-------------------+------------+------------------------+
</span><span class='line'>| Polling Station   | City       | Total Number of Voters |
</span><span class='line'>+-------------------+------------+------------------------+
</span><span class='line'>| polling_station_1 | Cairo      | 7734                   |
</span><span class='line'>+-------------------+------------+------------------------+
</span><span class='line'>| polling_station_2 | Giza       | 13332                  |
</span><span class='line'>+-------------------+------------+------------------------+
</span><span class='line'>| polling_station_3 | Alexandria | 10901                  |
</span><span class='line'>+-------------------+------------+------------------------+</span></code></pre></td></tr></table></div></figure>


<p>As in most spreadsheets, the first row is the header row that describes the data, and the actual data is in the rows to follow.</p>

<p>I did a quick search and found several libraries that deal with excel in Python,
there is even a website dedicated to listing them  <a href="http://www.python-excel.org">http://www.python-excel.org</a>.
I chose to go with <a href="http://pypi.python.org/pypi/xlrd">XLRD</a>, and you can find it in <a href="http://www.lexicon.net/sjmachin/xlrd.htm">PyPi</a> as well.</p>

<p>We need to install it first by running this command :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install xlrd</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ easy_install xlrd</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s start coding.</p>

<p>XLRD calls the whole excel document a &#8220;Workbook&#8221;, to open it we can do the following in an interactive python
shell from the same path as the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">xlrd</span> <span class="kn">import</span> <span class="n">open_workbook</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="n">open_workbook</span><span class="p">(</span><span class="s">&#39;data.xls&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can manipulate the excel document using this &#8220;book&#8221; object we created. Remember the book has all the document.
An excel document can  have one or multiple sheets inside it that hold the data.
The first sheet has an index of 0, the second has an index of 1 and so on.</p>

<p>To open the first sheet which holds the sample data above we do this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">first_sheet</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">sheet_by_index</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are ready to manipulate the sheet, get information about it and extract data from it.
For example to know the number of &#8220;effective columns&#8221; in the sheet we can print the <code>ncols</code> attribute of the sheet,
or to know the number of &#8220;effective rows&#8221;, the rows that contain data, we can use the <code>nrows</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">first_sheet</span><span class="o">.</span><span class="n">ncols</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">first_sheet</span><span class="o">.</span><span class="n">nrows</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now know how many rows contain actual data in the first sheet of our excel document. Time to loop over the rows and extract data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">first_sheet</span><span class="o">.</span><span class="n">nrows</span><span class="p">):</span>
</span><span class='line'>        <span class="n">row</span> <span class="o">=</span> <span class="n">first_sheet</span><span class="o">.</span><span class="n">row_slice</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">station</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>        <span class="n">city</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>        <span class="n">voters</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Polling Station : {} in {} has {} voter&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">station</span><span class="p">,</span> <span class="n">city</span><span class="p">,</span> <span class="n">voters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Polling</span> <span class="n">station</span> <span class="n">polling_station_1</span> <span class="ow">in</span> <span class="n">Cairo</span> <span class="n">has</span> <span class="mf">7734.0</span> <span class="n">voters</span>
</span><span class='line'><span class="n">Polling</span> <span class="n">station</span> <span class="n">polling_station_2</span> <span class="ow">in</span> <span class="n">Giza</span> <span class="n">has</span> <span class="mf">13332.0</span> <span class="n">voters</span>
</span><span class='line'><span class="n">Polling</span> <span class="n">station</span> <span class="n">polling_station_3</span> <span class="ow">in</span> <span class="n">Alexandria</span> <span class="n">has</span> <span class="mf">10901.0</span> <span class="n">voters</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the previous snippet of code we started to loop over the rows skipping the first row <code>range(1, first_sheet.nrows)</code>
Then we sliced every row out of the sheet with <code>row_slice()</code> and then accessed it by column index to extract data from columns <code>row[]</code>
and then we accessed the value of the cell by calling the <code>row[].value</code>.</p>

<p>This is a very simple usage of the library, I suggest you read its documentation, you will find many great stuff :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">xlrd</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">help</span><span class="p">(</span><span class="n">xlrd</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">help</span><span class="p">(</span><span class="n">xlrd</span><span class="o">.</span><span class="n">sheet</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally check my answer on a question about the issue on <a href="http://stackoverflow.com/questions/13805274/have-no-idea-with-python-excel-read-data-file/13805734#13805734">StackOverflow</a>.</p>

<p>That&#8217;s it for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Poor man's guide for Monitoring a website using Python]]></title>
    <link href="http://www.mos3abof.com/blog/2013/02/11/monitoring-a-website-using-python/"/>
    <updated>2013-02-11T17:34:00+02:00</updated>
    <id>http://www.mos3abof.com/blog/2013/02/11/monitoring-a-website-using-python</id>
    <content type="html"><![CDATA[<p><img src="http://s8.postimage.org/gvv1dcv4l/website_monitoring_with_python.jpg" alt="Monitor your website with Python" /></p>

<p>In one of the projects I am working on there was a problem with Apache server. It went down almost on a daily basis, and we were reading the logs to get the bottom of the root cause. But untill we got our solution we needed to monitor the server&#8217;s accssibility through the web, and get alerted if it went down, and ultimately restart it when this happened.</p>

<p>So I fired up my console and text editor and started hacking a little script to do the above mentioned side goals.</p>

<ol>
<li>Monitoring the Apache server&#8217;s accessiblity from a different server.</li>
<li>SSH-ing the linux box running the server and restarting Apache.</li>
<li>Alerting the DevOps team about the issue.</li>
<li>Putting it all together</li>
<li>Setting up a cron job to run the script</li>
</ol>


<p>I am assuming you are running an ubunut machine.</p>

<h3>1. Monitoring the Apache Server</h3>

<p>I was confused between two <code>Python 2.x</code> libraries (note that they are dramatically changed in <code>Python 3.x</code> and choosing between them is subject to different ciretera).
The first library was <code>python-httplib</code> and the second was <code>urllib</code>. After a quick reading through both library&#8217;s manual and a quick reading on StackOverflow I have decided to go for urllib.</p>

<p>Basically what I had in mind was to send a GET request to the website served by Apache and check the HTTP response code I got.
If it is <em>200</em> -which is the SUCCESS response code according to HTTP standards- then everything is fine.</p>

<p>You can try this in a python interactive shell :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">response_code</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&quot;http://www.example.com&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">getcode</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">response_code</span>
</span><span class='line'><span class="mi">200</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the printed value is 200 then the website is up and running, if it has a different value or raises an Exception then the site is likely down (Assuming you have internet connectivity, no firewalls blocking your way, etc).</p>

<p>Time to put it together in a script :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">resposne_code</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&quot;http://www.example.com&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">getcode</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">response_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>    <span class="c"># Here write code to do whatever you want to do when the website is down.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Restart the Apache server remotely</h3>

<p>There is a wonderful Python library and a command-line tool called <em><a href="http://docs.fabfile.org/en/1.5/">Fabric</a></em> that helps you streamlining the use of SSH for application deployment or systems administration tasks. It is ideally used to automate tedious error prone tasks in an easy way.</p>

<p>You can read about more about it in their documentation.</p>

<p>Install it by running the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">fabric</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need to create a new python file that I will name <code>fabfile.py</code>, you can name it anything, but let&#8217;s just follow the common name you will see in Fabric&#8217;s documenation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">env</span><span class="p">,</span> <span class="n">sudo</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">hosts</span>       <span class="o">=</span> <span class="p">[</span><span class="s">&#39;user@server&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">passwords</span>   <span class="o">=</span> <span class="p">{</span><span class="s">&#39;user@server&#39;</span> <span class="p">:</span> <span class="s">&#39;password&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">restart_apache</span><span class="p">():</span>
</span><span class='line'>    <span class="n">sudo</span><span class="p">(</span><span class="s">&quot;apache2ctl restart&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We start by importing what we need from Fabric. Then we tell it some information about the server we want to restart Apache on by setting the <code>env.hosts</code> and <code>env.passwords</code> variables.</p>

<p>Then we define a <code>restart_apache</code> function that we will call later to do the actual restart.</p>

<p>There are three main functions that are used the most, <code>local()</code> that runs local commands, <code>run()</code> that runs commands on the remote server and <code>sudo()</code> that runs commands on the remote server using <code>sudo</code>. Since Apache restart requires a root user or sudo priveleges we used the <code>sudo()</code> function.</p>

<p>To run a Fabric script open up your terminal and run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">fabric</span> <span class="n">fabfile</span><span class="o">.</span><span class="n">py</span> <span class="n">restart_apache</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to run it from a different directory than the <code>fabfile.py</code> then you need to use the <code>-f</code> option like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">fabric</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">fabfile</span><span class="o">.</span><span class="n">py</span> <span class="n">function_name</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Alerting the DevOps team about the issue.</h3>

<p>We can re-use the email function from the previous post on this blog <a href="http://www.mos3abof.com/blog/2012/11/29/installing-gdata-python-client-on-dreamhost/">Installing Gdata Python Client on Dreamhost</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smtplib</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEMultipart</span> <span class="kn">import</span> <span class="n">MIMEMultipart</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEBase</span> <span class="kn">import</span> <span class="n">MIMEBase</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email.MIMEText</span> <span class="kn">import</span> <span class="n">MIMEText</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">email</span> <span class="kn">import</span> <span class="n">Encoders</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">subject</span>        <span class="o">=</span> <span class="s">&#39;Your website is down&#39;</span>
</span><span class='line'><span class="n">email_body</span> <span class="o">=</span> <span class="s">&#39;Your website is down&#39;</span>
</span><span class='line'><span class="n">gmail_user</span> <span class="o">=</span> <span class="s">&#39;YOUR-GMAIL-ADDRESS&#39;</span>
</span><span class='line'><span class="n">gmail_pwd</span>  <span class="o">=</span> <span class="s">&#39;YOUR-GMAIL-PASSWORD&#39;</span>
</span><span class='line'><span class="n">recepient</span>  <span class="o">=</span> <span class="s">&#39;DEVOPS-EMAIL&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mail</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">gmail_user</span><span class="p">,</span> <span class="n">gmail_pwd</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd"> Sends mail using gmail</span>
</span><span class='line'><span class="sd"> &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Setting up message data</span>
</span><span class='line'>  <span class="n">msg</span><span class="p">[</span><span class="s">&#39;From&#39;</span><span class="p">]</span>     <span class="o">=</span> <span class="s">&#39;DEVOPS-EMAIL&#39;</span>
</span><span class='line'>  <span class="n">msg</span><span class="p">[</span><span class="s">&#39;To&#39;</span><span class="p">]</span>       <span class="o">=</span> <span class="n">to</span>
</span><span class='line'>  <span class="n">msg</span><span class="p">[</span><span class="s">&#39;Subject&#39;</span><span class="p">]</span>  <span class="o">=</span> <span class="n">subject</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msg</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">MIMEText</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Opening the connection with Gmail SMTP server</span>
</span><span class='line'>  <span class="n">mailServer</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">(</span><span class="s">&quot;smtp.gmail.com&quot;</span><span class="p">,</span> <span class="mi">587</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">ehlo</span><span class="p">()</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">starttls</span><span class="p">()</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">ehlo</span><span class="p">()</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">gmail_user</span><span class="p">,</span> <span class="n">gmail_pwd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Actual sending of the email</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">gmail_user</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># Closing the connection</span>
</span><span class='line'>  <span class="c"># Should be mailServer.quit(), but that crashes</span>
</span><span class='line'>  <span class="n">mailServer</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Putting it all together</h3>

<p>I have combined all the snippets mentioned above, modified them and added some logging functionality to it.</p>

<p>I have it installed on <code>/opt/fabfile.py</code> and I have created a <code>/opt/fab_logs</code> folder to hold the log files.</p>

<p>Below is how a complete script may look like.</p>

<div><script src='https://gist.github.com/4771874.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>5. Setting up a cron job to run the script</h3>

<p>Now we have a great script, and we know how to run it manually. But it would be invonvenient to run it manually all the time. We need to setup a cron job to do it periodically for us.</p>

<p>Run the following command in the terminal to edit your crontab file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">crontab</span> <span class="o">-</span><span class="n">e</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add the following line to the file to run the script every hour:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">0</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">fab</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">fabfile</span><span class="o">.</span><span class="n">py</span> <span class="n">restart_apache</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy website monitoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Gdata Python Client on Dreamhost]]></title>
    <link href="http://www.mos3abof.com/blog/2012/11/29/installing-gdata-python-client-on-dreamhost/"/>
    <updated>2012-11-29T22:05:00+02:00</updated>
    <id>http://www.mos3abof.com/blog/2012/11/29/installing-gdata-python-client-on-dreamhost</id>
    <content type="html"><![CDATA[<p><img src="http://2.bp.blogspot.com/-ILyPuIzOCFA/ULU4WBlgvdI/AAAAAAAADLU/NokoEzlRnSQ/s400/google_devlogo.jpeg" alt="Google Developers Logo" /></p>

<p>Our company&#8217;s website is hosted on <a href="" title="http://www.dreamhost.com&quot;, &quot;DreamHost">Dreamhost</a>. Today I needed to write a python script that utilizes some of Youtube&#8217;s APIs to send us a daily digest of videos we are interested in, so I ran into the problem of needing to install a python library on our hosting account which I don&#8217;t have root or admin access to.</p>

<p>Here is what I did.</p>

<p>First of all, I am assuming that you have enabled SSH access to your domain name you are doing this for. If this is not the case, then this article may be of great help : <a href="" title="http://ahappycustomer.dreamhosters.com/dreamhost-ssh.html&quot;, &quot;DreamHost SSH">DreamHost  SSH</a></p>

<p>1. I downloaded the <a href="" title="http://code.google.com/p/gdata-python-client/downloads/list">gdata-python-client</a> from code.google.com (at the moment I am writing this post the latest stable version is 2.0.17) using the following command :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~ 
</span><span class='line'>$ wget http://gdata-python-client.googlecode.com/files/gdata-2.0.17.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>2. Untar the tarball:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar -xzvf gdata-2.0.17.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>3. Change your directory to the uncompressed folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd gdata-2.0.17</span></code></pre></td></tr></table></div></figure>


<p>4. Here is the trick, since we don&#8217;t have administrative access, we can&#8217;t install the library system-wide, but we can however install it for our account by running this command :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python setup.py install --home=~/</span></code></pre></td></tr></table></div></figure>


<p>To test if everything is right run the following command :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./tests/run_all_tests.py</span></code></pre></td></tr></table></div></figure>


<p>5. Although the library is now installed on your account, you can&#8217;t yet import it directly, you need to add the path of libraries to the system.path in your python script in order to be able to import it, so at the beginning of your script add the following two lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import os, sys
</span><span class='line'>sys.path.append(os.environ['HOME'] + '/lib/python')</span></code></pre></td></tr></table></div></figure>


<p>What these two lines do is constructing a dynamic path to your new lib folder that contains gdata-python-client by getting the home path from the system registered in the variable os.environ[&#8216;HOME&#8217;] and concatinating &#8216;/lib/python&#8217; to it, then it appends this dynamically generated path to the system path so that the python interpreter will look into this folder when importing gdata</p>

<p>6. Now you can do stuff with gdata like :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">gdata.youtubeimport</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">gdata</span><span class="o">.</span><span class="n">youtube</span><span class="o">.</span><span class="n">service</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is my final script that I wrote, and I set up a cron job to run it every morning :</p>

<div><script src='https://gist.github.com/4164654.js'></script>
<noscript><pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

# Important imports
import os, sys

# Append the python libs installed on dreamhost to the sys.path
sys.path.append(os.environ['HOME'] +'/lib/python')

# Import email stuff
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders

# Import the Gdata library
import gdata.youtube
import gdata.youtube.service

def PrintEntryDetails(entry):
    '''
    Takes an entry from a youtube standard feed and returns some of
    its data as a human readable string
    '''
    entry_details = 'Video title: %s' % entry.media.title.text + '\n'
    entry_details += 'Video published on: %s ' % entry.published.text + '\n'
    entry_details += 'Video watch page: %s' % entry.media.player.url + '\n'
    entry_details += 'Video duration: %s' % entry.media.duration.seconds + '\n'
    entry_details += &quot;==========================================&quot; + '\n'

    return entry_details

def PrintVideoFeed(feed):
    '''
    Takes a youtube standard feed, formats it and returns a list of all included videos 
    in a human readable string
    '''
    output = ''
    for entry in feed.entry:
        try:
            output += PrintEntryDetails(entry)
        except:
            pass
    return output


def mail(to, subject, text, gmail_user, gmail_pwd):
    '''
    Sends mail using gmail
    '''
    msg = MIMEMultipart()

    # Setting up message data
    msg['From']     = 'FROM-EMAIL'
    msg['To']       = to
    msg['Subject']  = subject

    msg.attach(MIMEText(text))

    # Opening the connection with Gmail SMTP server
    mailServer = smtplib.SMTP(&quot;smtp.gmail.com&quot;, 587)
    mailServer.ehlo()
    mailServer.starttls()
    mailServer.ehlo()
    mailServer.login(gmail_user, gmail_pwd)

    # Actual sending of the email
    mailServer.sendmail(gmail_user, to, msg.as_string())
    
    # Closing the connection
    # Should be mailServer.quit(), but that crashes
    mailServer.close()

# Defining the main function
if __name__ == '__main__':
    # Setting up mail credentials
    gmail_user  = &quot;REPLACE-THIS-WITH-YOUR-GMAIL-USERNAME&quot;
    gmail_pwd   = &quot;REPLACE-THIS-WITH-YOUR-GMAIL-PASSWORD&quot;

    # List of people to receive this daily digest
        # Modify this to match your recipients list
    recepient_list = [
        'recepient1@example.com',
        'recepient2@example.com',
    ]

    # Instantiate a YouYubeService object
    yt_service = gdata.youtube.service.YouTubeService()

    # Set the developer key and client id for monitoris this app
    yt_service.developer_key = 'REPLACE-THIS-WITH-YOUR-YOUTUBE-DEVELOPER-KEY'
    yt_service.client_id = 'REPLACE-THIS-WITH-YOUR-YOUTUBE-CLIENT-ID'


    # The standard feed URI for most shared videos in region Egypt
    uri = 'http://gdata.youtube.com/feeds/api/standardfeeds/EG/most_shared?v=2'

    # Preparing the email body to be sent
    # By assigning the videos in the feed in a human readable string format
    email_body = PrintVideoFeed(yt_service.GetYouTubeVideoFeed(uri))
    
    # Looping over recepients and emailing them the digest
    for recepient in recepient_list:
        mail(recepient, &quot;أكثر مقاطع الفيديو مشاركة على يوتيوب اليوم&quot;,  email_body, gmail_user, gmail_pwd)</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
