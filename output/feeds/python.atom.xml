<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mosab Ahmad</title><link href="http://www.mos3abof.com/" rel="alternate"></link><link href="./feeds/python.atom.xml" rel="self"></link><id>http://www.mos3abof.com/</id><updated>2013-02-19T13:18:00+02:00</updated><entry><title>Reading Data from Excel Sheets in Python</title><link href="http://www.mos3abof.com/reading-excel-sheets-in-python.html" rel="alternate"></link><updated>2013-02-19T13:18:00+02:00</updated><author><name>Mosab Ahmad</name></author><id>tag:www.mos3abof.com,2013-02-19:reading-excel-sheets-in-python.html</id><summary type="html">&lt;p&gt;On &lt;em&gt;May 22nd 2012&lt;/em&gt; I was approached by the official campaign of the presidential candidate "&lt;a href="http://www.abolfotoh.net/"&gt;Abolfotoh&lt;/a&gt;".
They needed help setting up a Google App Engine application.&lt;/p&gt;
&lt;p&gt;It was an interactive map that uses Google Maps to plot data about voters and polling stations.
What they wanted further was to create another application to collect data from their official representatives on the ground and use this tool
to feed the Google App Engine application with data.&lt;/p&gt;
&lt;p&gt;The application was originally created by "&lt;a href="http://www.espace.com.eg"&gt;Espace&lt;/a&gt;" &lt;em&gt;-an awesome Egyptian company-&lt;/em&gt; and published on &lt;a href="https://code.google.com/p/egypt-election-2012-demo/"&gt;Google Code&lt;/a&gt;.
I helped the official campaign with the setup on Google App Enginer, but that is another story.&lt;/p&gt;
&lt;p&gt;Before running the project in production, we needed to import a lot of data about the polling stations and the voters, like the Governorate it belonged to, the city, the number of voters per every station, the police station it belongs to, address, etc.&lt;/p&gt;
&lt;p&gt;This data was only available in an excel sheet so I had to find a quick programatical way to import it.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, lets assume the data in the excel sheet was formatted like this :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;+-------------------+------------+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Polling&lt;/span&gt; &lt;span class="n"&gt;Station&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;City&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Voters&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------------+------------+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;polling_station_1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cairo&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7734&lt;/span&gt;                   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------------+------------+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;polling_station_2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Giza&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;13332&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------------+------------+------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;polling_station_3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Alexandria&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;10901&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------------+------------+------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As in most spreadsheets, the first row is the header row that describes the data, and the actual data is in the rows to follow.&lt;/p&gt;
&lt;p&gt;I did a quick search and found several libraries that deal with excel in Python,
there is even a website dedicated to listing them  &lt;a href="http://www.python-excel.org"&gt;http://www.python-excel.org&lt;/a&gt;.
I chose to go with &lt;a href="http://pypi.python.org/pypi/xlrd"&gt;XLRD&lt;/a&gt;, and you can find it in &lt;a href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;PyPi&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;We need to install it first by running this command :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install xlrd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install xlrd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's start coding.&lt;/p&gt;
&lt;p&gt;XLRD calls the whole excel document a "Workbook", to open it we can do the following in an interactive python
shell from the same path as the file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xlrd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;open_workbook&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open_workbook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data.xls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can manipulate the excel document using this "book" object we created. Remember the book has all the document.
An excel document can  have one or multiple sheets inside it that hold the data.
The first sheet has an index of 0, the second has an index of 1 and so on.&lt;/p&gt;
&lt;p&gt;To open the first sheet which holds the sample data above we do this :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first_sheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sheet_by_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are ready to manipulate the sheet, get information about it and extract data from it.
For example to know the number of "effective columns" in the sheet we can print the &lt;code&gt;ncols&lt;/code&gt; attribute of the sheet,
or to know the number of "effective rows", the rows that contain data, we can use the &lt;code&gt;nrows&lt;/code&gt; attribute.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;first_sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;first_sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now know how many rows contain actual data in the first sheet of our excel document. Time to loop over the rows and extract data.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;station&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="n"&gt;voters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Polling Station : {} in {} has {} voter&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;station&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Polling&lt;/span&gt; &lt;span class="n"&gt;station&lt;/span&gt; &lt;span class="n"&gt;polling_station_1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Cairo&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="mf"&gt;7734.0&lt;/span&gt; &lt;span class="n"&gt;voters&lt;/span&gt;
&lt;span class="n"&gt;Polling&lt;/span&gt; &lt;span class="n"&gt;station&lt;/span&gt; &lt;span class="n"&gt;polling_station_2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Giza&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="mf"&gt;13332.0&lt;/span&gt; &lt;span class="n"&gt;voters&lt;/span&gt;
&lt;span class="n"&gt;Polling&lt;/span&gt; &lt;span class="n"&gt;station&lt;/span&gt; &lt;span class="n"&gt;polling_station_3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Alexandria&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="mf"&gt;10901.0&lt;/span&gt; &lt;span class="n"&gt;voters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the previous snippet of code we started to loop over the rows skipping the first row &lt;code&gt;range(1, first_sheet.nrows)&lt;/code&gt;
Then we sliced every row out of the sheet with &lt;code&gt;row_slice()&lt;/code&gt; and then accessed it by column index to extract data from columns &lt;code&gt;row[]&lt;/code&gt;
and then we accessed the value of the cell by calling the &lt;code&gt;row[].value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a very simple usage of the library, I suggest you read its documentation, you will find many great stuff :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xlrd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlrd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlrd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally check my answer on a question about the issue on &lt;a href="http://stackoverflow.com/questions/13805274/have-no-idea-with-python-excel-read-data-file/13805734#13805734"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's it for now.&lt;/p&gt;</summary><category term="Python"></category><category term="XLRD"></category><category term="Excel"></category></entry><entry><title>Installing Gdata Python Client on Dreamhost</title><link href="http://www.mos3abof.com/installing-gdata-python-client-on-dreamhost.html" rel="alternate"></link><updated>2012-11-29T22:05:00+02:00</updated><author><name>Mosab Ahmad</name></author><id>tag:www.mos3abof.com,2012-11-29:installing-gdata-python-client-on-dreamhost.html</id><summary type="html">&lt;p&gt;Our company's website is hosted on &lt;a href="" title="http://www.dreamhost.com&amp;quot;, &amp;quot;DreamHost"&gt;Dreamhost&lt;/a&gt;. Today I needed to write a python script that utilizes some of Youtube's APIs to send us a daily digest of videos we are interested in, so I ran into the problem of needing to install a python library on our hosting account which I don't have root or admin access to.&lt;/p&gt;
&lt;p&gt;Here is what I did.&lt;/p&gt;
&lt;p&gt;First of all, I am assuming that you have enabled SSH access to your domain name you are doing this for. If this is not the case, then this article may be of great help : &lt;a href="" title="http://ahappycustomer.dreamhosters.com/dreamhost-ssh.html&amp;quot;, &amp;quot;DreamHost SSH"&gt;DreamHost  SSH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1. I downloaded the &lt;a href="" title="http://code.google.com/p/gdata-python-client/downloads/list"&gt;gdata-python-client&lt;/a&gt; from code.google.com (at the moment I am writing this post the latest stable version is 2.0.17) using the following command :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://gdata-python-client.googlecode.com/files/gdata-2.0.17.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2. Untar the tarball:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xzvf gdata-2.0.17.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3. Change your directory to the uncompressed folder:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;gdata-2.0.17
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4. Here is the trick, since we don't have administrative access, we can't install the library system-wide, but we can however install it for our account by running this command :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py install --home&lt;span class="o"&gt;=&lt;/span&gt;~/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test if everything is right run the following command :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./tests/run_all_tests.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5. Although the library is now installed on your account, you can't yet import it directly, you need to add the path of libraries to the system.path in your python script in order to be able to import it, so at the beginning of your script add the following two lines:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/lib/python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What these two lines do is constructing a dynamic path to your new lib folder that contains gdata-python-client by getting the home path from the system registered in the variable os.environ['HOME'] and concatinating '/lib/python' to it, then it appends this dynamically generated path to the system path so that the python interpreter will look into this folder when importing gdata&lt;/p&gt;
&lt;p&gt;6. Now you can do stuff with gdata like :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gdata.youtubeimport&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;youtube&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is my final script that I wrote, and I set up a cron job to run it every morning :&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/4164654.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-

# Important imports
import os, sys

# Append the python libs installed on dreamhost to the sys.path
sys.path.append(os.environ['HOME'] +'/lib/python')

# Import email stuff
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders

# Import the Gdata library
import gdata.youtube
import gdata.youtube.service

def PrintEntryDetails(entry):
	'''
	Takes an entry from a youtube standard feed and returns some of
	its data as a human readable string
	'''
	entry_details = 'Video title: %s' % entry.media.title.text + '\n'
	entry_details += 'Video published on: %s ' % entry.published.text + '\n'
	entry_details += 'Video watch page: %s' % entry.media.player.url + '\n'
	entry_details += 'Video duration: %s' % entry.media.duration.seconds + '\n'
	entry_details += "==========================================" + '\n'

	return entry_details

def PrintVideoFeed(feed):
	'''
	Takes a youtube standard feed, formats it and returns a list of all included videos 
	in a human readable string
	'''
	output = ''
	for entry in feed.entry:
		try:
			output += PrintEntryDetails(entry)
		except:
			pass
	return output


def mail(to, subject, text, gmail_user, gmail_pwd):
	'''
	Sends mail using gmail
	'''
	msg = MIMEMultipart()

	# Setting up message data
	msg['From'] 	= 'FROM-EMAIL'
	msg['To'] 		= to
	msg['Subject']	= subject

	msg.attach(MIMEText(text))

	# Opening the connection with Gmail SMTP server
	mailServer = smtplib.SMTP("smtp.gmail.com", 587)
	mailServer.ehlo()
	mailServer.starttls()
	mailServer.ehlo()
	mailServer.login(gmail_user, gmail_pwd)

	# Actual sending of the email
	mailServer.sendmail(gmail_user, to, msg.as_string())
	
	# Closing the connection
	# Should be mailServer.quit(), but that crashes
	mailServer.close()

# Defining the main function
if __name__ == '__main__':
	# Setting up mail credentials
	gmail_user	= "REPLACE-THIS-WITH-YOUR-GMAIL-USERNAME"
	gmail_pwd	= "REPLACE-THIS-WITH-YOUR-GMAIL-PASSWORD"

	# List of people to receive this daily digest
        # Modify this to match your recipients list
	recepient_list = [
		'recepient1@example.com',
		'recepient2@example.com',
	]

	# Instantiate a YouYubeService object
	yt_service = gdata.youtube.service.YouTubeService()

	# Set the developer key and client id for monitoris this app
	yt_service.developer_key = 'REPLACE-THIS-WITH-YOUR-YOUTUBE-DEVELOPER-KEY'
	yt_service.client_id = 'REPLACE-THIS-WITH-YOUR-YOUTUBE-CLIENT-ID'


	# The standard feed URI for most shared videos in region Egypt
	uri = 'http://gdata.youtube.com/feeds/api/standardfeeds/EG/most_shared?v=2'

	# Preparing the email body to be sent
	# By assigning the videos in the feed in a human readable string format
	email_body = PrintVideoFeed(yt_service.GetYouTubeVideoFeed(uri))
	
	# Looping over recepients and emailing them the digest
	for recepient in recepient_list:
		mail(recepient, "أكثر مقاطع الفيديو مشاركة على يوتيوب اليوم",  email_body, gmail_user, gmail_pwd)&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Happy Gdata programming on Dreamhost :)&lt;/p&gt;</summary><category term="Python"></category><category term="Dreamhost"></category><category term="GData"></category></entry></feed>