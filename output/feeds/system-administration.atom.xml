<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mosab Ahmad</title><link href="http://www.mos3abof.com/" rel="alternate"></link><link href="./feeds/system-administration.atom.xml" rel="self"></link><id>http://www.mos3abof.com/</id><updated>2013-02-11T17:34:00+02:00</updated><entry><title>Poor Man's Guide for Monitoring a Website in Python</title><link href="http://www.mos3abof.com/poor-man-website-python-monitor.html" rel="alternate"></link><updated>2013-02-11T17:34:00+02:00</updated><author><name>Mosab Ahmad</name></author><id>tag:www.mos3abof.com,2013-02-11:poor-man-website-python-monitor.html</id><summary type="html">&lt;p&gt;In one of the projects I am working on there was a problem with Apache server. It went down almost on a daily basis, and we were reading the logs to get the bottom of the root cause. But untill we got our solution we needed to monitor the server's accssibility through the web, and get alerted if it went down, and ultimately restart it when this happened.&lt;/p&gt;
&lt;p&gt;So I fired up my console and text editor and started hacking a little script to do the above mentioned side goals.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Monitoring the Apache server's accessiblity from a different server.&lt;/li&gt;
&lt;li&gt;SSH-ing the linux box running the server and restarting Apache.&lt;/li&gt;
&lt;li&gt;Alerting the DevOps team about the issue.&lt;/li&gt;
&lt;li&gt;Putting it all together&lt;/li&gt;
&lt;li&gt;Setting up a cron job to run the script&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am assuming you are running an ubunut machine.&lt;/p&gt;
&lt;h3 id="146-monitoring-the-apache-server"&gt;1. Monitoring the Apache Server&lt;/h3&gt;
&lt;p&gt;I was confused between two &lt;code&gt;Python 2.x&lt;/code&gt; libraries (note that they are dramatically changed in &lt;code&gt;Python 3.x&lt;/code&gt; and choosing between them is subject to different ciretera).
The first library was &lt;code&gt;python-httplib&lt;/code&gt; and the second was &lt;code&gt;urllib&lt;/code&gt;. After a quick reading through both library's manual and a quick reading on StackOverflow I have decided to go for urllib.&lt;/p&gt;
&lt;p&gt;Basically what I had in mind was to send a GET request to the website served by Apache and check the HTTP response code I got.
If it is &lt;em&gt;200&lt;/em&gt; -which is the SUCCESS response code according to HTTP standards- then everything is fine.&lt;/p&gt;
&lt;p&gt;You can try this in a python interactive shell :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response_code&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the printed value is 200 then the website is up and running, if it has a different value or raises an Exception then the site is likely down (Assuming you have internet connectivity, no firewalls blocking your way, etc).&lt;/p&gt;
&lt;p&gt;Time to put it together in a script :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;resposne_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="c"&gt;# Here write code to do whatever you want to do when the website is down.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="246-restart-the-apache-server-remotely"&gt;2. Restart the Apache server remotely&lt;/h3&gt;
&lt;p&gt;There is a wonderful Python library and a command-line tool called &lt;em&gt;&lt;a href="http://docs.fabfile.org/en/1.5/"&gt;Fabric&lt;/a&gt;&lt;/em&gt; that helps you streamlining the use of SSH for application deployment or systems administration tasks. It is ideally used to automate tedious error prone tasks in an easy way.&lt;/p&gt;
&lt;p&gt;You can read about more about it in their documentation.&lt;/p&gt;
&lt;p&gt;Install it by running the following command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install fabric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now need to create a new python file that I will name &lt;code&gt;fabfile.py&lt;/code&gt;, you can name it anything, but let's just follow the common name you will see in Fabric's documenation.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user@server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user@server&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;restart_apache&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apache2ctl restart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We start by importing what we need from Fabric. Then we tell it some information about the server we want to restart Apache on by setting the &lt;code&gt;env.hosts&lt;/code&gt; and &lt;code&gt;env.passwords&lt;/code&gt; variables.&lt;/p&gt;
&lt;p&gt;Then we define a &lt;code&gt;restart_apache&lt;/code&gt; function that we will call later to do the actual restart.&lt;/p&gt;
&lt;p&gt;There are three main functions that are used the most, &lt;code&gt;local()&lt;/code&gt; that runs local commands, &lt;code&gt;run()&lt;/code&gt; that runs commands on the remote server and &lt;code&gt;sudo()&lt;/code&gt; that runs commands on the remote server using &lt;code&gt;sudo&lt;/code&gt;. Since Apache restart requires a root user or sudo priveleges we used the &lt;code&gt;sudo()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To run a Fabric script open up your terminal and run the following command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;fabric fabfile.py restart_apache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to run it from a different directory than the &lt;code&gt;fabfile.py&lt;/code&gt; then you need to use the &lt;code&gt;-f&lt;/code&gt; option like this :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;fabric -f /path/to/your/fabfile.py function_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="346-alerting-the-devops-team-about-the-issue"&gt;3. Alerting the DevOps team about the issue.&lt;/h3&gt;
&lt;p&gt;We can re-use the email function from the previous post on this blog &lt;a href="http://www.mos3abof.com/installing-gdata-python-client-on-dreamhost.html"&gt;Installing Gdata Python Client on Dreamhost&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEMultipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEBase&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEBase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEText&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Encoders&lt;/span&gt;


&lt;span class="n"&gt;subject&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Your website is down&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;email_body&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Your website is down&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gmail_user&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;YOUR-GMAIL-ADDRESS&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gmail_pwd&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;YOUR-GMAIL-PASSWORD&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;recepient&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DEVOPS-EMAIL&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gmail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gmail_pwd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Sends mail using gmail&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# Setting up message data&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DEVOPS-EMAIL&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;

    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# Opening the connection with Gmail SMTP server&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;smtp.gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gmail_pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Actual sending of the email&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;# Closing the connection&lt;/span&gt;
    &lt;span class="c"&gt;# Should be mailServer.quit(), but that crashes&lt;/span&gt;
    &lt;span class="n"&gt;mailServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="446-putting-it-all-together"&gt;4. Putting it all together&lt;/h3&gt;
&lt;p&gt;I have combined all the snippets mentioned above, modified them and added some logging functionality to it.&lt;/p&gt;
&lt;p&gt;I have it installed on &lt;code&gt;/opt/fabfile.py&lt;/code&gt; and I have created a &lt;code&gt;/opt/fab_logs&lt;/code&gt; folder to hold the log files.&lt;/p&gt;
&lt;p&gt;Below is how a complete script may look like.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/4771874.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-
 
# Import DateTime
from datetime import datetime, timedelta, date
 
# Import urllib
import urllib
 
# Importing utilities from Fabric
from fabric.api import env, sudo
 
# Import email stuff
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders
 
# For debugging purposes
import traceback
 
# Import Logging lib
import logging
 
# Setting up Logging 
current_date 			= date.today()
current_log_file_name 		= '/opt/fab_logs/' + current_date.isoformat() + '.log'
logging.basicConfig( format 	= '%(asctime)s [%(levelname)s] %(message)s', 
		    filename 	= current_log_file_name, 
		    level 	= logging.INFO)
 
# Defining the env.hosts
env.hosts 	= ['username@server-address']
env.passwords 	= {'username@server-address' : 'passoword' }
 
 
# The function that actually sends email
def mail(to, subject, text, gmail_user, gmail_pwd):
	'''
	Sends mail using gmail
	'''
	msg = MIMEMultipart()
 
	# Setting up message data
	msg['From'] 	= 'alterts@yoursite.com'
	msg['To'] 	= to
	msg['Subject']	= subject
 
	msg.attach(MIMEText(text))
 
	# Opening the connection with Gmail SMTP server
	mailServer = smtplib.SMTP("smtp.gmail.com", 587)
	mailServer.ehlo()
	mailServer.starttls()
	mailServer.ehlo()
	mailServer.login(gmail_user, gmail_pwd)
 
	# Actual sending of the email
	mailServer.sendmail(gmail_user, to, msg.as_string())
	
	# Closing the connection
	# Should be mailServer.quit(), but that crashes
	mailServer.close()
 
# Alerting the DevOps Team
def alert_dev_team(message = ''):
	'''
	This functions emails the DevOps Team that there is a downtime
	'''
	# Constructing the email message
	subject		= 'YOUR WEBSITE IS DOWN'
	email_body	= 'YOUR WEBSITE IS DOWN. \nTime now is {} \n{}'.format(date.today().isoformat(), message)
	gmail_user	= 'GMAIL-USERNAME'
	gmail_pwd	= 'PASSWORD'
	logging.debug("Constructed Email message")
	recepient 	= 'alerts@yoursite.com'

	# Sending the message
	mail(recepient, subject,  email_body, gmail_user, gmail_pwd)
	logging.debug("Finished sending all messages")
 
 
# Let the magic begin
def restart_apache():
	'''
	Checks if Apache2 server on YOUR WEBSITE is accessible through the web.
	If not it attemptes to restart it and alert the Dev Team.
 
	It should be added to cron to run every 5 minutes like this :
 
	*/5 * * * * /usr/bin/fab -f /opt/fabfile.py restart_apache
	'''
 
	try:
		logging.info("The script was invoked by the cron")
 
		# Open the site using urllib
		result = urllib.urlopen("http://www.yourwebsite.com").getcode()
 
		# if the alue of the respsonse is not 200 then raise an error
		if not result == 200:
			raise ValueError
		# Log the attempt and successful result
		logging.info("The result came back {}".format(result))
		logging.info("Everything seems fine! Over and out!")
 
	# if we don't get a response at all or the value is not 200 OK then start the mechanism
	except:
		# Something with the wsbite is not right, attempt to restart the Apache server
		logging.error("Houston, we have got a problem! Attempting an Apache restart")
		logging.debug(traceback.format_exc())
		
		# setup the message to email to DevOps team
		message = 'Restart attempt complete. Everything should be fine now'
 
		try:
			# restart apache using sudo
			sudo('apache2ctl restart')
 
		except:
			# If the restart attempt fails we should know!
			logging.error("WE FAILED! The script couldn't restart the Apache. Human intervention needed!")
			logging.error(traceback.format_exc())
			message = "WE FAILED! The script couldn't restart the Apache. Human intervention needed!"
 
		try:
			# Attempt to alert the DevOps team
			alert_dev_team(message)
			logging.info("Sending an email to alerts@yoursite.com")
		except:
			logging.error('Tried sending an email and failed!')
		logging.info("Restart attempt complete. Everything should be fine now")&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;h3 id="546-setting-up-a-cron-job-to-run-the-script"&gt;5. Setting up a cron job to run the script&lt;/h3&gt;
&lt;p&gt;Now we have a great script, and we know how to run it manually. But it would be invonvenient to run it manually all the time. We need to setup a cron job to do it periodically for us.&lt;/p&gt;
&lt;p&gt;Run the following command in the terminal to edit your crontab file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;crontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add the following line to the file to run the script every hour:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;0 * * * * /usr/bin/fab -f /path/to/your/fabfile.py restart_apache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Happy website monitoring.&lt;/p&gt;</summary><category term="Python"></category><category term="urllib"></category><category term="monitoring"></category><category term="Fabric"></category></entry></feed>